generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model GuestSession {
  id         String   @id @default(cuid())
  lastActive DateTime @updatedAt
  createdAt  DateTime @default(now())

  @@index([lastActive])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  role             UserRole           @default(STUDENT)
  lastActive       DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  permissions      AccessPermission[]
  accounts         Account[]
  knowledgeEntries KnowledgeEntry[]
  notifications    Notification[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model KnowledgeEntry {
  id             String               @id @default(uuid())
  title          String
  description    String?
  content        String
  fileName       String?
  fileSize       Int?
  fileMimeType   String?
  fileStorageUrl String?
  authorId       String
  status         KnowledgeEntryStatus @default(DRAFT)
  accessLevel    AccessLevel          @default(PRIVATE)
  categoryId     String?
  viewsCount     Int                  @default(0)
  downloadsCount Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  permissions    AccessPermission[]
  author         User                 @relation(fields: [authorId], references: [id])
  category       Category?            @relation(fields: [categoryId], references: [id])
  tags           Tag[]                @relation("KnowledgeEntryToTag")

  @@index([authorId, status])
  @@index([accessLevel, status])
  @@index([title])
  @@index([categoryId])
  @@index([createdAt])
}

model AccessPermission {
  id               String         @id @default(cuid())
  knowledgeEntryId String
  userId           String?
  grantedToRole    UserRole?
  expiresAt        DateTime?
  createdAt        DateTime       @default(now())
  knowledgeEntry   KnowledgeEntry @relation(fields: [knowledgeEntryId], references: [id], onDelete: Cascade)
  user             User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([knowledgeEntryId, userId, grantedToRole])
  @@index([knowledgeEntryId])
  @@index([userId])
}

model Category {
  id               String           @id @default(uuid())
  name             String           @unique
  description      String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  knowledgeEntries KnowledgeEntry[]
}

model Tag {
  id               String           @id @default(uuid())
  name             String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  knowledgeEntries KnowledgeEntry[] @relation("KnowledgeEntryToTag")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  content   String
  isPublic  Boolean          @default(false)
  userId    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      NotificationType @default(NOTI)
  user      User?            @relation(fields: [userId], references: [id])

  @@index([isPublic, createdAt])
  @@index([userId, createdAt])
}

enum UserRole {
  GUEST_ROLE
  STUDENT
  LECTURER
  ADMIN
}

enum KnowledgeEntryStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  HIDDEN
}

enum AccessLevel {
  PUBLIC
  STUDENT_ONLY
  LECTURER_ONLY
  PRIVATE
}

enum NotificationType {
  NOTI
  BANNER
}
